package spamassasin100;

import weka.core.*;
import weka.classifiers.meta.FilteredClassifier;

import java.util.ArrayList;
import java.io.*;
import java.io.File;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * SpamDetectionSPAM100
 * Kelas yang akan mengerjakan prosedur penentuan (prediksi) jenis suatu teks, 
 * apakah merupakan spam atau bukan berdasarkan hasil pemodelan yang diperoleh sebelumnya.
 * @author Albertus Kelvin
 */
public class SpamDetectionSPAM100 extends javax.swing.JFrame {

    // ATRIBUT ALGORITMA
    
    // menyimpan lokasi file penyimpan model
    private String LOC_MODEL_DETECTION;
    // menyimpan lokasi file input
    private String LOC_INPUT_DETECTION;
    // menyimpan isi file input yang akan diprediksi
    String text_input;
    // menyimpan objek data baru (berupa dataset) yang akan diprediksi
    Instances instances;
    // menyimpan jenis classifier yang digunakan
    FilteredClassifier classifier;
		
    // METHODS 
    
    /**
     * Konstruktor
     * menerima array of String sebanyak satu elemen yang menyimpan lokasi
     * file yang menyimpan model
     * @param loc_model Lokasi file penyimpan model
     */
    public SpamDetectionSPAM100(String[] loc_model) {
        initComponents();
        //loc_model[0] = loc_model[0].replace("\\", "\\\\");
        jTextField_spamdetectionmodel.setText(loc_model[0]);
        jTextField_spamdetectionmodel.setEditable(false);
        jTextField_hasildeteksispam.setEditable(false);
        jTextField_hasildeteksiINpanel.setEditable(false);
        jTextField_isifileinputtxt.setEditable(false);
        jTextField_fileinputLOC.setEditable(false);
        jTextArea_prosesdeteksi.setEditable(false);
        LOC_MODEL_DETECTION = loc_model[0];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_spamdetectiontitle = new javax.swing.JLabel();
        jPanel_infomodelloc = new javax.swing.JPanel();
        jTextField_spamdetectionmodel = new javax.swing.JTextField();
        jPanel_detaildeteksi = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_prosesdeteksi = new javax.swing.JTextArea();
        jProgressBar_prosesdeteksi = new javax.swing.JProgressBar();
        jLabel_hasilINpanel = new javax.swing.JLabel();
        jTextField_hasildeteksiINpanel = new javax.swing.JTextField();
        jLabel_isifiletitle = new javax.swing.JLabel();
        jTextField_isifileinputtxt = new javax.swing.JTextField();
        jLabel_detailprosestitle = new javax.swing.JLabel();
        jPanel_infohasildeteksi = new javax.swing.JPanel();
        jTextField_hasildeteksispam = new javax.swing.JTextField();
        jPanel_infofileinput = new javax.swing.JPanel();
        jTextField_fileinputLOC = new javax.swing.JTextField();
        jButton_fileinputBROWSE = new javax.swing.JButton();
        jButton_exitdeteksi = new javax.swing.JButton();
        jButton_startdeteksi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_spamdetectiontitle.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel_spamdetectiontitle.setText("Spam Detection");

        jPanel_infomodelloc.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Model", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 0, 14))); // NOI18N

        jTextField_spamdetectionmodel.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel_infomodellocLayout = new javax.swing.GroupLayout(jPanel_infomodelloc);
        jPanel_infomodelloc.setLayout(jPanel_infomodellocLayout);
        jPanel_infomodellocLayout.setHorizontalGroup(
            jPanel_infomodellocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_infomodellocLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField_spamdetectionmodel)
                .addContainerGap())
        );
        jPanel_infomodellocLayout.setVerticalGroup(
            jPanel_infomodellocLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_infomodellocLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jTextField_spamdetectionmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel_detaildeteksi.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Proses deteksi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 0, 14))); // NOI18N

        jTextArea_prosesdeteksi.setColumns(20);
        jTextArea_prosesdeteksi.setRows(5);
        jScrollPane1.setViewportView(jTextArea_prosesdeteksi);

        jProgressBar_prosesdeteksi.setStringPainted(true);

        jLabel_hasilINpanel.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel_hasilINpanel.setText("Hasil deteksi");

        jTextField_hasildeteksiINpanel.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        jLabel_isifiletitle.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel_isifiletitle.setText("Isi file input:");

        jTextField_isifileinputtxt.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        jLabel_detailprosestitle.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel_detailprosestitle.setText("Detail proses:");

        javax.swing.GroupLayout jPanel_detaildeteksiLayout = new javax.swing.GroupLayout(jPanel_detaildeteksi);
        jPanel_detaildeteksi.setLayout(jPanel_detaildeteksiLayout);
        jPanel_detaildeteksiLayout.setHorizontalGroup(
            jPanel_detaildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_detaildeteksiLayout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addComponent(jProgressBar_prosesdeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
            .addGroup(jPanel_detaildeteksiLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel_detaildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_detailprosestitle)
                    .addGroup(jPanel_detaildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel_isifiletitle)
                        .addComponent(jLabel_hasilINpanel)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                        .addComponent(jTextField_hasildeteksiINpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField_isifileinputtxt)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_detaildeteksiLayout.setVerticalGroup(
            jPanel_detaildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_detaildeteksiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel_isifiletitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_isifileinputtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jLabel_detailprosestitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jProgressBar_prosesdeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel_hasilINpanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField_hasildeteksiINpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        jPanel_infohasildeteksi.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Hasil deteksi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 0, 14))); // NOI18N

        jTextField_hasildeteksispam.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel_infohasildeteksiLayout = new javax.swing.GroupLayout(jPanel_infohasildeteksi);
        jPanel_infohasildeteksi.setLayout(jPanel_infohasildeteksiLayout);
        jPanel_infohasildeteksiLayout.setHorizontalGroup(
            jPanel_infohasildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_infohasildeteksiLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jTextField_hasildeteksispam, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel_infohasildeteksiLayout.setVerticalGroup(
            jPanel_infohasildeteksiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_infohasildeteksiLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jTextField_hasildeteksispam, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel_infofileinput.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "File Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 1, 14))); // NOI18N

        jTextField_fileinputLOC.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        jButton_fileinputBROWSE.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton_fileinputBROWSE.setText("Browse");
        jButton_fileinputBROWSE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_fileinputBROWSEActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_infofileinputLayout = new javax.swing.GroupLayout(jPanel_infofileinput);
        jPanel_infofileinput.setLayout(jPanel_infofileinputLayout);
        jPanel_infofileinputLayout.setHorizontalGroup(
            jPanel_infofileinputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_infofileinputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField_fileinputLOC)
                .addContainerGap())
            .addGroup(jPanel_infofileinputLayout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jButton_fileinputBROWSE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_infofileinputLayout.setVerticalGroup(
            jPanel_infofileinputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_infofileinputLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTextField_fileinputLOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton_fileinputBROWSE, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        jButton_exitdeteksi.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton_exitdeteksi.setText("Exit");
        jButton_exitdeteksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_exitdeteksiActionPerformed(evt);
            }
        });

        jButton_startdeteksi.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton_startdeteksi.setText("Start Detection");
        jButton_startdeteksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_startdeteksiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel_infomodelloc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel_infohasildeteksi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel_infofileinput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(117, 117, 117)
                                .addComponent(jLabel_spamdetectiontitle)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel_detaildeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jButton_startdeteksi)
                        .addGap(87, 87, 87)
                        .addComponent(jButton_exitdeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel_spamdetectiontitle)
                        .addGap(27, 27, 27)
                        .addComponent(jPanel_infomodelloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jPanel_infofileinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jPanel_infohasildeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jPanel_detaildeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_exitdeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_startdeteksi, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_exitdeteksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_exitdeteksiActionPerformed
        //KAMUS
        int n;
        
        //ALGORITMA
        n = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin keluar?", "Action Confirmation", JOptionPane.YES_NO_OPTION);
        
        if (n==0) {
            // jika user memilih opsi 'YES'
            System.exit(0);
        } else {
            // jika user memilih opsi 'NO'
            this.setVisible(true);
        }
    }//GEN-LAST:event_jButton_exitdeteksiActionPerformed

    /**
     * Aksi yang dilakukan jika user menekan tombol Browse,
     * yaitu user akan diarahkan untuk memilih file input berekstensi TXT yang
     * di dalamnya berisi teks yang akan diprediksi, apakah spam atau bukan
     * @param evt 
     */
    private void jButton_fileinputBROWSEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_fileinputBROWSEActionPerformed
        //KAMUS
        int result;
        File selectedFile;
        String loc_file_input;
        
        //ALGORITMA
        JFileChooser fileChooser = new JFileChooser();
        
        // penambahan opsi untuk mem-filter file yang berekstensi .txt 
        fileChooser.addChoosableFileFilter(new ExtensionFilter("txt","File in TXT format") );
        
        // inisiasi direktori awal pencarian file pada direktori home
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        
        result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            // jika user sudah memilih sebuah file
            selectedFile = fileChooser.getSelectedFile();
            jTextField_fileinputLOC.setText(selectedFile.getAbsolutePath());
            loc_file_input = selectedFile.getAbsolutePath();
            loc_file_input = loc_file_input.replace("\\", "\\\\");
            LOC_INPUT_DETECTION = loc_file_input;
        }
    }//GEN-LAST:event_jButton_fileinputBROWSEActionPerformed

    /**
     * Aksi yang dilakukan jika user menekan tombol Start Detection, 
     * yaitu program akan memulai menganalisis teks input berdasarkan
     * model yang sudah dipelajari sebelumnya dan menentukan apakah teks
     * input tersebut berjenis spam atau bukan
     * @param evt 
     */
    private void jButton_startdeteksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_startdeteksiActionPerformed
        
        if (jTextField_fileinputLOC.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Anda belum memilih lokasi file input", "Invalid Start Action", JOptionPane.WARNING_MESSAGE);
        } else {
            SPAMDetection detect = new SPAMDetection();                
            detect.start();
        }
        
    }//GEN-LAST:event_jButton_startdeteksiActionPerformed

    /**
     * Subclass untuk proses pendeteksian spam
     */
    private class SPAMDetection extends Thread {    
      
        public SPAMDetection(){
        }
        
        /**
         * Prosedur membaca isi file input yang berisi teks yang akan diprediksi spam atau bukan
         * @param fileName Lokasi file input
         */
        public void fileInputAccess(String fileName) {
		try {
			BufferedReader reader = new BufferedReader(new FileReader(fileName));
			
                        // mengambil isi file input
                        String line;
			text_input = "";
                        while ((line = reader.readLine()) != null) {
                            text_input = text_input + " " + line;
                        }
                        reader.close();
                        
                        // output isi file input 
                        jTextField_isifileinputtxt.setText(text_input);
                        
                        // output pesan sukses pembacaan file input
                        jTextArea_prosesdeteksi.append("[OK] Membaca file input" + "\n");
                        jTextArea_prosesdeteksi.append("Lokasi file input: " + fileName + "\n");
                        jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                        jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
		}
		catch (IOException e) {
                        // kasus jika pembacaan file input gagal
                        jTextArea_prosesdeteksi.append("[FAIL] Gagal membaca file input dari: " + fileName + "\n");
                        jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                        jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
		}
	}
        
        /**
         * Prosedur membaca isi file yang menyimpan hasil pemodelan oleh classifier 
         * @param fileName Lokasi file penyimpan hasil pemodelan
         */
        public void fileModelAccess(String fileName) {
		try {
                    // validasi dan load model
                    ObjectInputStream in = new ObjectInputStream(new FileInputStream(fileName));
                    Object savedModel = in.readObject();
                    classifier = (FilteredClassifier) savedModel;
                    in.close();
                    
                    // output pesan sukses pembacaan file model
                    jTextArea_prosesdeteksi.append("[OK] Membaca file model" + "\n");
                    jTextArea_prosesdeteksi.append("Lokasi file model: " + fileName + "\n");
                    jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                    jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
                } 
		catch (Exception e) {
                    // kasus jika pembacaan file model gagal
                    jTextArea_prosesdeteksi.append("[FAIL] Gagal membaca file model dari: " + fileName + "\n");
                    jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                    jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
		}
	}
        
        /**
         * Prosedur membentuk objek atribut yang terdiri dari bagian yang 
         * akan diprediksi dan teks hasil klasifikasi.
         * Prosedur ini juga akan membentuk objek data yang akan
         * diprediksi (spam/bukan) yang isinya didapat dari file input.
         * Prosedur ini juga menentukan bagian mana dari ruang data yang akan menjadi
         * bagian yang diprediksi nilainya (class).
         */
        public void objectCreation() {
		
                /** 
                 * Membentuk nilai atribut yang akan diprediksi (class).
                 * Nilai tersebut adalah "spam" dan "bukan spam".
                 * Nilai tersebut disimpan sementara dalam sebuah ArrayList.
                 */
                ArrayList<String> isi_attr_class = new ArrayList<>();
                isi_attr_class.add("SPAM");
                isi_attr_class.add("BUKAN_SPAM");

                /**
                 * Membentuk objek atribut yang terdiri dari dua buah,
                 * yaitu class (yang akan diprediksi) dan text
                 */
                Attribute attr1 = new Attribute("class", isi_attr_class);
                Attribute attr2 = new Attribute("text",(ArrayList<String>) null);

                /**
                 * Menyimpan objek atribut yang sudah terbentuk ke dalam ArrayList
                 * untuk sementara
                 */
                ArrayList<Attribute> attrObj = new ArrayList<>();
                attrObj.add(attr1);
                attrObj.add(attr2);
                
                /**
                 * Membentuk objek yang berupa dataset baru dengan nama relasi "DataTestDetection",
                 * menginisiasi atribut mana yang akan diprediksi (atribut ke-0), dan 
                 * menambahkan teks pada file input ke dalam atribut ke-1 (text).
                 */
                instances = new Instances("DataTestDetection", attrObj, 1);           
                instances.setClassIndex(0);
                DenseInstance instance = new DenseInstance(2);
                instance.setValue(attr2, text_input);
                instances.add(instance);

                // output pesan sukses pembentukan objek atribut dan data
                jTextArea_prosesdeteksi.append("[OK] Membentuk objek atribut dan data" + "\n \n");
                jTextArea_prosesdeteksi.append(instances.toString());
                jTextArea_prosesdeteksi.append("\n \n");
                jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
	}
        
        /**
         * Prosedur untuk mengklasifikasikan objek data.
         * Hasilnya adalah "spam" atau "bukan spam".
         */
        public void inputClassification() {
		try {
                    // klasifikasi teks input dengan atribut yang akan diprediksi adalah atribut pertama
                    double txtClassified = classifier.classifyInstance(instances.instance(0));
                    
                    // output hasil klasifikasi teks input
                    jTextField_hasildeteksiINpanel.setText(instances.classAttribute().value((int) txtClassified));
                    jTextField_hasildeteksispam.setText(instances.classAttribute().value((int) txtClassified));
                    
                    // output pesan sukses prosedur klasifikasi teks input
                    jTextArea_prosesdeteksi.append("[OK] Klasifikasi teks input" + "\n");
                    jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                    jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
                }
		catch (Exception e) {
                    // kasus jika prosedur klasifikasi gagal
                    jTextArea_prosesdeteksi.append("[FAIL] Gagal klasifikasi teks input" + "\n");
                    jTextArea_prosesdeteksi.append("------------------------------------------------------------------------" + "\n");
                    jTextArea_prosesdeteksi.update(jTextArea_prosesdeteksi.getGraphics());
		}		
	}
        
        @Override
        public void run() {
            
            // membuat tombol Start Detection, Browse dan Exit tidak dapat diakses selama proses pendeteksian teks
            jButton_fileinputBROWSE.setEnabled(false);
            jButton_exitdeteksi.setEnabled(false);
            jButton_startdeteksi.setEnabled(false);
            
            /**
             * Proses iterasi dari 0 sampai 100 (dalam persen) sebagai penanda proses pendeteksian teks
             * yang diwakili oleh sebuah progress bar
             */
            for (int i = 0; i <= 100; i++) {
                final int progress = i;
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        
                        // update nilai progress bar
                        jProgressBar_prosesdeteksi.setValue(progress);
                        
                        /**
                         * Urutan prosedur pembentukan model:
                         * 1. membaca isi file input
                         * 2. membaca isi file model
                         * 3. membentuk objek atribut dan data
                         * 4. melakukan klasifikasi teks
                         */
                        if (progress == 10) {
                            fileInputAccess(LOC_INPUT_DETECTION);
                        } else if (progress == 40) {
                            fileModelAccess(LOC_MODEL_DETECTION);
                        } else if (progress == 60) {
                            objectCreation();
                        } else if (progress == 100) {
                            inputClassification();
                        }
                        
                    }
                });
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {}
            }
            // tombol Start Detection, Browse dan Exit dapat diakses kembali
            jButton_fileinputBROWSE.setEnabled(true);
            jButton_exitdeteksi.setEnabled(true);
            jButton_startdeteksi.setEnabled(true);
        }
    }
    
    /**
     * menerima array of String sebanyak satu elemen yang menyimpan
     * lokasi file yang menyimpan model
     * @param args Lokasi file penyimpan model
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpamDetectionSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpamDetectionSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpamDetectionSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpamDetectionSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpamDetectionSPAM100(args).setVisible(true);
            }
        });
    }

    // ATRIBUT USER INTERFACE 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_exitdeteksi;
    private javax.swing.JButton jButton_fileinputBROWSE;
    private javax.swing.JButton jButton_startdeteksi;
    private javax.swing.JLabel jLabel_detailprosestitle;
    private javax.swing.JLabel jLabel_hasilINpanel;
    private javax.swing.JLabel jLabel_isifiletitle;
    private javax.swing.JLabel jLabel_spamdetectiontitle;
    private javax.swing.JPanel jPanel_detaildeteksi;
    private javax.swing.JPanel jPanel_infofileinput;
    private javax.swing.JPanel jPanel_infohasildeteksi;
    private javax.swing.JPanel jPanel_infomodelloc;
    private javax.swing.JProgressBar jProgressBar_prosesdeteksi;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea_prosesdeteksi;
    private javax.swing.JTextField jTextField_fileinputLOC;
    private javax.swing.JTextField jTextField_hasildeteksiINpanel;
    private javax.swing.JTextField jTextField_hasildeteksispam;
    private javax.swing.JTextField jTextField_isifileinputtxt;
    private javax.swing.JTextField jTextField_spamdetectionmodel;
    // End of variables declaration//GEN-END:variables
}
