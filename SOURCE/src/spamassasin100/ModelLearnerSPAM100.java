package spamassasin100;

import weka.core.Instances;
import weka.core.converters.ArffLoader.ArffReader;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.meta.FilteredClassifier;
import weka.filters.unsupervised.attribute.StringToWordVector;

import java.io.*;
import java.util.Random;
import javax.swing.SwingUtilities;

/**
 * ModelLearnerSPAM100
 * Kelas yang akan mengerjakan prosedur pembelajaran dan pembentukan model
 * dari data train yang diberikan. Hasil pemodelan akan disimpan untuk digunakan
 * saat memprediksi jenis suatu teks.
 * @author Albertus Kelvin
 */
public class ModelLearnerSPAM100 extends javax.swing.JFrame {

    // ATRIBUT ALGORITMA
    
    // menyimpan lokasi file dataset 
    private final String LOC_DATASET;
    // menyimpan lokasi file untuk menyimpan model
    private final String LOC_MODEL;
    // menyimpan file dataset yang di dalamnya terdapat training data
    Instances train_data;
    // menyimpan hasil pembentukan token
    StringToWordVector token_filter;
    // menyimpan jenis classifier
    FilteredClassifier classifier;
    
    // METHODS
    
    /**
     * Konstruktor 
     * Menerima parameter berupa array of String sebanyak 2 buah, dimana
     * elemen pertama berisi lokasi dataset dan elemen kedua berisi lokasi file model
     */
    public ModelLearnerSPAM100(String[] loc) {
        initComponents();
        loc[0] = loc[0].replace("\\", "\\\\");
        loc[1] = loc[1].replace("\\", "\\\\");
        jTextField_learndataLOC.setText(loc[0]);
        jTextField_learnmodelLOC.setText(loc[1]);
        jTextField_learndataLOC.setEditable(false);
        jTextField_learnmodelLOC.setEditable(false);
        jTextArea_detailproses.setEditable(false);
        jButton_test.setEnabled(false);
        LOC_DATASET = loc[0];
        LOC_MODEL = loc[1];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel_modellearning = new javax.swing.JLabel();
        jPanel_learninfo = new javax.swing.JPanel();
        jLabel_learndataset = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel_learnmodel = new javax.swing.JLabel();
        jTextField_learndataLOC = new javax.swing.JTextField();
        jTextField_learnmodelLOC = new javax.swing.JTextField();
        jButton_startlearning = new javax.swing.JButton();
        jPanel_prosesmodel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_detailproses = new javax.swing.JTextArea();
        jProgressBar_prosesmodel = new javax.swing.JProgressBar();
        jButton_test = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel_modellearning.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        jLabel_modellearning.setText("Model Learning");

        jPanel_learninfo.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel_learndataset.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel_learndataset.setText("Lokasi dataset:");

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        jLabel_learnmodel.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        jLabel_learnmodel.setText("Lokasi model:");

        jTextField_learndataLOC.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        jTextField_learnmodelLOC.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N

        javax.swing.GroupLayout jPanel_learninfoLayout = new javax.swing.GroupLayout(jPanel_learninfo);
        jPanel_learninfo.setLayout(jPanel_learninfoLayout);
        jPanel_learninfoLayout.setHorizontalGroup(
            jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_learninfoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel_learndataset)
                    .addComponent(jLabel_learnmodel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField_learndataLOC, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_learnmodelLOC, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_learninfoLayout.setVerticalGroup(
            jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_learninfoLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_learndataset)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_learndataLOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel_learninfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_learnmodel)
                    .addComponent(jTextField_learnmodelLOC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jButton_startlearning.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton_startlearning.setText("Start Learning");
        jButton_startlearning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_startlearningActionPerformed(evt);
            }
        });

        jPanel_prosesmodel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Proses pemodelan", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 0, 14))); // NOI18N

        jTextArea_detailproses.setColumns(20);
        jTextArea_detailproses.setRows(5);
        jScrollPane1.setViewportView(jTextArea_detailproses);

        jProgressBar_prosesmodel.setStringPainted(true);

        jButton_test.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        jButton_test.setText("Test Input");
        jButton_test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_testActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_prosesmodelLayout = new javax.swing.GroupLayout(jPanel_prosesmodel);
        jPanel_prosesmodel.setLayout(jPanel_prosesmodelLayout);
        jPanel_prosesmodelLayout.setHorizontalGroup(
            jPanel_prosesmodelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_prosesmodelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jProgressBar_prosesmodel, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(jPanel_prosesmodelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_prosesmodelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton_test)
                .addGap(197, 197, 197))
        );
        jPanel_prosesmodelLayout.setVerticalGroup(
            jPanel_prosesmodelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_prosesmodelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jProgressBar_prosesmodel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jButton_test, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel_learninfo, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel_modellearning)
                        .addGap(206, 206, 206))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jButton_startlearning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)))
                .addComponent(jPanel_prosesmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel_modellearning)
                        .addGap(34, 34, 34)
                        .addComponent(jPanel_learninfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jButton_startlearning, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel_prosesmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Aksi yang dilakukan saat user menekan tombol 'Start Learning',
     * yaitu memulai proses pembentukan model berdasarkan dataset yang diberikan
     * @param evt 
     */
    private void jButton_startlearningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_startlearningActionPerformed
        
        LearningProcess pro_learn = new LearningProcess();                
        pro_learn.start();
        
    }//GEN-LAST:event_jButton_startlearningActionPerformed

    /**
     * Aksi yang dilakukan saat user menekan tombol 'Test Input',
     * yaitu mengarahkan user ke halaman untuk melakukan klasifikasi teks, 
     * apakah itu termasuk spam atau bukan.
     * Aksi lainnya yaitu mengirimkan lokasi file penyimpan model untuk diakses lebih lanjut oleh
     * bagian klasifikasi teks (SpamDetectionSPAM100).
     * @param evt 
     */
    private void jButton_testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_testActionPerformed
        //KAMUS
        String[] loc_model = new String[1];
        
        //ALGORITMA
        loc_model[0] = LOC_MODEL;
        SpamDetectionSPAM100.main(loc_model);
        this.setVisible(false);
    }//GEN-LAST:event_jButton_testActionPerformed
    
    /**
     * Subclass untuk proses pembentukan model
     */
    private class LearningProcess extends Thread {    
      
        public LearningProcess(){
        }

        /**
         * Prosedur membaca isi dari file dataset yang memiliki ekstensi ARFF (menggunakan ArffReader)
         * @param fileName Menyimpan nama file dataset yang digunakan untuk membangun model
         */
        public void dataSetAccess(String fileName) {
            try {
                    BufferedReader reader = new BufferedReader(new FileReader(fileName));
                    // membaca file dengan format ARFF
                    ArffReader arff = new ArffReader(reader);
                    // menyimpan isi file (bagian training data) dalam variabel trainData
                    train_data = arff.getData();
                    // output pesan yang menandakan proses pembacaan file berhasil
                    jTextArea_detailproses.append("[OK] Akses dataset" + "\n");
                    jTextArea_detailproses.append("Lokasi dataset: " + fileName + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    // aksi refresh frame agar pesan sukses dapat ditampilkan secara real-time
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
                    reader.close();
            }
            catch (IOException e) {
                    // kasus jika pembacaan file gagal
                    jTextArea_detailproses.append("[FAIL] Gagal mengakses dataset: " + fileName + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            }
        }

        /**
         * Prosedur untuk melakukan evaluasi terhadap classifier sebelum melakukan
         * pembentukan model.
         * Evaluasi tersebut meliputi penentuan bagian mana dari data yang akan ditentukan nilai prediksinya,
         * konversi teks data yang berformat string menjadi token, dan penentuan jenis classifier.
         * Prosedur ini hanya melakukan evaluasi terhadap classifier, bukan melatihnya untuk membentuk model.
         */
        public void classifierEvaluation() {
            try {
                    // bagian data yang akan diprediksi nilainya adalah atribut ke-0 (paling pertama)
                    train_data.setClassIndex(0);
                    // pemecahan teks yang bertipe string ke dalam beberapa token
                    token_filter = new StringToWordVector();
                    token_filter.setAttributeIndices("last");
                    // penentuan jenis classifier
                    classifier = new FilteredClassifier();
                    classifier.setFilter(token_filter);
                    classifier.setClassifier(new NaiveBayes());
                    // penentuan metode training untuk melakukan pembentukan model (crossValidation) 
                    Evaluation eval = new Evaluation(train_data);
                    eval.crossValidateModel(classifier, train_data, 4, new Random(1));

                    // output hasil proses evaluasi
                    jTextArea_detailproses.append("[OK] Evaluasi classifier dan training data" + "\n");
                    jTextArea_detailproses.append(eval.toSummaryString() + "\n");
                    jTextArea_detailproses.append("=========================" + "\n");
                    jTextArea_detailproses.append(eval.toClassDetailsString() + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());

            }
            catch (Exception e) {
                    // kasus jika prosedur evaluasi gagal
                    jTextArea_detailproses.append("[FAIL] Error dalam melakukan evaluasi" + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            }
        }

        /**
         * Prosedur melatih classifier untuk membentuk model dari dataset yang dipilih
         */
        public void modelCreation() {
            try {
                    // bagian data yang akan diprediksi nilainya adalah atribut ke-0 (paling pertama)
                    train_data.setClassIndex(0);
                    // pemecahan teks yang bertipe string ke dalam beberapa token
                    token_filter = new StringToWordVector();
                    token_filter.setAttributeIndices("last");
                    // penentuan jenis classifier
                    classifier = new FilteredClassifier();
                    classifier.setFilter(token_filter);
                    classifier.setClassifier(new NaiveBayes());
                    // prosedur pembentukan model dari dataset yang dipilih
                    classifier.buildClassifier(train_data);
                    
                    // output pesan sukses pembentukan model
                    jTextArea_detailproses.append("[OK] Pelatihan & Pembentukan model oleh classifier" + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            }
            catch (Exception e) {
                    // kasus jika proses pembentukan model (training) gagal
                    jTextArea_detailproses.append("[FAIL] Error dalam pembentukan model" + "\n");
                    jTextArea_detailproses.append("--------------------------------------------------------------------" + "\n");
                    jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            }
        }
        
        /**
         * Prosedur menyimpan model yang telah terbentuk oleh classifier ke dalam sebuah file.
         * @param fileName Lokasi file yang akan menyimpan model yang telah terbentuk tersebut.
         */
        public void modelToFile(String fileName) {
            try {
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName));
                // memasukkan model yang terbentuk ke dalam file yang dipilih
                out.writeObject(classifier);
                out.close();
                
                // output pesan sukses penyimpanan model ke dalam file
                jTextArea_detailproses.append("[OK] Menyimpan model" + "\n");
                jTextArea_detailproses.append("Lokasi penyimpanan: " + fileName + "\n");
                jTextArea_detailproses.append("------------------------------------------------------------------------" + "\n");
                jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            } 
            catch (IOException e) {
                // kasus jika prosedur penyimpanan model gagal
                jTextArea_detailproses.append("[FAIL] Gagal menyimpan model ke: " + fileName + "\n");
                jTextArea_detailproses.append("------------------------------------------------------------------------" + "\n");
                jTextArea_detailproses.update(jTextArea_detailproses.getGraphics());
            }
        }

        @Override
        public void run() {
            
            // membuat tombol Start Learning dan Test Input tidak dapat diakses selama proses pembentukan model
            jButton_startlearning.setEnabled(false);
            jButton_test.setEnabled(false);
            
            /**
             * Proses iterasi dari 0 sampai 100 (dalam persen) sebagai penanda proses pembentukan model
             * yang diwakili oleh sebuah progress bar
             */
            for (int i = 0; i <= 100; i++) {
                final int progress = i;
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        
                        // update nilai progress bar
                        jProgressBar_prosesmodel.setValue(progress);
                        
                        /**
                         * Urutan prosedur pembentukan model:
                         * 1. membaca isi file dataset
                         * 2. melakukan evaluasi terhadap classifier
                         * 3. melatih classifier untuk membentuk model
                         * 4. menyimpan model ke dalam file eksternal
                         */
                        if (progress == 10) {
                            dataSetAccess(LOC_DATASET);
                        } else if (progress == 40) {
                            classifierEvaluation();
                        } else if (progress == 90) {
                            modelCreation();
                        } else if (progress == 100) {
                            modelToFile(LOC_MODEL);
                        }
                        
                    }
                });
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {}
            }
            // tombol Start Learning dan Test Input dapat diakses kembali
            jButton_startlearning.setEnabled(true);
            jButton_test.setEnabled(true);
        }
   }
    
    /**
     * menerima array of String yang menyimpan lokasi dari
     * dataset dan model
     * @param args Array of String yang berisi lokasi dataset dan file penyimpan model
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModelLearnerSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModelLearnerSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModelLearnerSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModelLearnerSPAM100.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModelLearnerSPAM100(args).setVisible(true);
            }
        });
    }

    // ATRIBUT USER INTERFACE
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_startlearning;
    private javax.swing.JButton jButton_test;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel_learndataset;
    private javax.swing.JLabel jLabel_learnmodel;
    private javax.swing.JLabel jLabel_modellearning;
    private javax.swing.JPanel jPanel_learninfo;
    private javax.swing.JPanel jPanel_prosesmodel;
    private javax.swing.JProgressBar jProgressBar_prosesmodel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea_detailproses;
    private javax.swing.JTextField jTextField_learndataLOC;
    private javax.swing.JTextField jTextField_learnmodelLOC;
    // End of variables declaration//GEN-END:variables
}
